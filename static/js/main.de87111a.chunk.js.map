{"version":3,"sources":["logo.svg","data/data.js","components/Navbar.jsx","components/CustomMap.jsx","components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["locationsData","id","lat","lng","info","image","Navbar","style","height","width","backgroundColor","textAlign","fontSize","mapStyles","GoogleApiWrapper","apiKey","google","useState","locations","setLocations","locationId","setLocationId","locationInfo","setLocationInfo","locationImage","setLocationImage","useEffect","location","find","item","console","log","display","justifyContent","marginTop","zoom","initialCenter","map","loc","position","onClick","src","alt","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de87111a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const locationsData =[\r\n    {id: 1, lat: 50.45525282580142, lng: 30.464636009201847, info: \"Kiev Zoo\", image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTxkWa-q8lO6jYTqlVrftZ9QUoA-9gkBKlRtA&usqp=CAU\"}, \r\n    {id: 2, lat: 50.45041913338108, lng: 30.51504445023941, info: \"FBI\" , image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRmVt0lBqzO9-O9ZaLZBxAbC-L1T6DUJtRvnQ&usqp=CAU\"}, \r\n    {id: 3, lat: 50.421987031882274, lng: 30.54723297282966, info: \"Chayhona Bazar\", image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSkKcEH96l-zbIKDJWJCyVfQCOf5GoPPeNpxg&usqp=CAU\"},\r\n    {id: 4, lat: 50.46433883061197, lng: 30.627096948690383, info: \"Privatbank\", image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSgyGbbZgtM-2WdVdrjDMffOjlJu-gfz8tzRg&usqp=CAU\"},\r\n    {id: 5, lat: 50.376264018093316, lng: 30.46124518734855, info: \"Kiev Racetrack\", image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSPYTO2AoJFFdVlp58r86OZ5HzZ9v0xUizcbA&usqp=CAU\"},\r\n    {id: 6, lat: 50.44418031824768, lng: 30.575901531744933, info: \"Kiev  Dinosaur Park\", image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRR1q3n2ZuNLjV8WsTlKsx_XvE7QR7v030lDg&usqp=CAU\"},\r\n  \r\n  ]","import React  from 'react'\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <div style={{ height:\"500px\", width:\"6em\", backgroundColor: 'grey', textAlign: \"center\", fontSize: \"40px\"}}>\r\n            Navbar\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useEffect, useState }  from 'react'\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react'\r\nimport { locationsData } from '../data/data'\r\nimport Navbar from './Navbar'\r\n\r\n\r\nconst mapStyles = {\r\n   width: \"800px\",\r\n  height: \"500px\",\r\n}\r\n\r\n\r\n\r\nconst CustomMap = ({google}) => {\r\n\r\nconst [locations, setLocations] = useState([])\r\nconst [locationId, setLocationId] = useState(null)\r\nconst [locationInfo, setLocationInfo] = useState(null)\r\nconst [locationImage, setLocationImage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setLocations(locationsData )\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (locationId) {\r\n      const location = locations.find(item => item.id === locationId)\r\n      setLocationInfo(location.info )\r\n      setLocationImage(location.image)\r\n    }\r\n    \r\n  }, [locationId])\r\n\r\n  console.log(locationId)\r\n  \r\n  return (\r\n    <div style={{display:\"flex\", justifyContent:'space-between' , marginTop:\"20px\", height:\"100%\"}}>\r\n      <Navbar />\r\n      <div style={{width: \"800px\",height: \"500px\",}}>\r\n\r\n        <Map \r\n          google={google}\r\n          zoom={11}\r\n          style={mapStyles}\r\n          initialCenter={{ lat: 50.44055686944465, lng: 30.53022771561217 }}\r\n        >\r\n        {locations.map(\r\n            loc =>  <Marker key={loc.id} position={{ lat: loc.lat, lng: loc.lng }} onClick={() => setLocationId(loc.id)} />\r\n            )}\r\n\r\n        </Map>\r\n      </div>\r\n      <div style={{width: \"300px\", height: \"300px\"}}>\r\n        <div>Info about place</div>\r\n        <img style={{width: \"300px\", height: \"300px\"}} src={locationImage} alt=\"\" />\r\n              \r\n        <div style={{}}>{locationInfo} </div>\r\n      </div>\r\n    </div>\r\n    \r\n  )\r\n\r\n}\r\n\r\n\r\n export default GoogleApiWrapper({\r\n apiKey: \"AIzaSyBEoYmhsxCFMlPtJaP_4B2SSjRDhtweDf0\",\r\n })(CustomMap);","import React  from 'react'\r\n\r\n\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div style={{height: \"100px\", width: \"100%\", backgroundColor: 'grey', textAlign: \"center\", fontSize: \"80px\"}}>\r\n            SOME PLACES IN KIEV\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import logo from './logo.svg';\nimport './App.css';\nimport { Wrapper, Status } from \"@googlemaps/react-wrapper\"\nimport CustomMap from './components/CustomMap';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport Header from './components/Header';\nimport Navbar from './components/Navbar';\n\n\n\n\nfunction App() {\n\n  return (\n    <>\n      <Header />\n     \n        \n      <CustomMap  />\n     \n      \n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      \n        <App />\n      \n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}